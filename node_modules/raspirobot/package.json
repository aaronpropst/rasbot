{
  "name": "raspirobot",
  "description": "SparkFun's RaspiRobot control for Node.js",
  "homepage": "http://github.com/jackwilsdon/raspirobot/",
  "version": "1.0.0",
  "keywords": [
    "raspberry",
    "pi",
    "gpio",
    "robot",
    "raspi"
  ],
  "author": {
    "name": "Jack Wilsdon",
    "email": "jack.wilsdon@gmail.com"
  },
  "main": "./lib/raspirobot.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/jackwilsdon/raspirobot.git"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "dependencies": {
    "gpio": ">= 0.2.0"
  },
  "readme": "# raspirobot\nA Node.js library to control SparkFun's [RaspiRobot board](https://www.sparkfun.com/products/11561).\n\nBased on [GpiO](https://github.com/EnotionZ/GpiO) by EnotionZ.\n\n## Installation\n**You will need node.js installed on your Raspberry Pi to use this library.**\nYou can install node.js on Raspbian using `apt-get install nodejs` as root.\n\nraspirobot is an npm package, so you can use the following to install it;\n\n\tnpm install raspirobot\n\t\n## Usage\n**Standard Usage**\n\n\tvar robot = require(\"raspirobot\"); // Import the library\n\trobot.setup(); // Set up GPIO ports\n\t\n\trobot.setLED(1, 1); // Turn on LED 1\n\trobot.setMotor(\"left\", 1); // Turn on the left motor\n\trobot.setMotor(\"right\", 1, 1); // Turn on the right motor\n\n**Input**\n\n\tvar robot = require(\"raspirobot\"); // Import the library\n\trobot.setup(); // Set up GPIO ports\n\t\n\trobot.setSwitchCallback(1, function(value) // Set the switch callback to a function\n\t{\n\t\tconsole.log(\"Switch changed to \"+value); // Output the new value of the switch\n\t});\n\t\n**Including this in your package**\nIf you want to use raspirobot in your package, add `raspirobot => 0.1.1` to your dependancies\n\n## Methods\nA list of all the available raspirobot methods can be found below\n\n`setup()` - Sets up the GPIO ports for SparkFun's [RaspiRobot board](https://www.sparkfun.com/products/11561).\n\n`setGPIO(gpio)` - Set the GPIO variable to be used (needs to be functionally identical to the [default library](https://github.com/EnotionZ/GpiO)).\n\n`getGPIO()` - Get the GPIO variable being used.\n\n`setMotor(side, value, [direction])` - Set the motor to on or off (1 or 0) using an optional motor direction.\n\n`getMotor(side)` - Returns information about the motor in the format `{\"on\": true, \"direction\": 0}`.\n\n`setLED(led, value)` - Set the LED to on or off (1 or 0).\n\n`getLED(led)` - Returns the LEDs current value (1 or 0).\n\n`setOC(oc, value)` - Set the OC to on or off (1 or 0).\n\n`getOC(oc)` - Returns the OCs current value (1 or 0).\n\n`setSwitchCallback(switch, callback)` - Adds a callback to the switch that is called on value change.",
  "readmeFilename": "README.md",
  "_id": "raspirobot@1.0.0",
  "_from": "raspirobot@"
}
